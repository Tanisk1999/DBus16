/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __GENERATED_CODE_H__
#define __GENERATED_CODE_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for com.example.DatabaseManager */

#define COM.EXAMPLE.DATABASEMANAGER_TYPE_COM_EXAMPLE_DATABASE_MANAGER (com.example.databasemanager_com_example_database_manager_get_type ())
#define COM.EXAMPLE.DATABASEMANAGER_COM_EXAMPLE_DATABASE_MANAGER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), COM.EXAMPLE.DATABASEMANAGER_TYPE_COM_EXAMPLE_DATABASE_MANAGER, comExampleDatabasemanagerComExampleDatabaseManager))
#define COM.EXAMPLE.DATABASEMANAGER_IS_COM_EXAMPLE_DATABASE_MANAGER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), COM.EXAMPLE.DATABASEMANAGER_TYPE_COM_EXAMPLE_DATABASE_MANAGER))
#define COM.EXAMPLE.DATABASEMANAGER_COM_EXAMPLE_DATABASE_MANAGER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), COM.EXAMPLE.DATABASEMANAGER_TYPE_COM_EXAMPLE_DATABASE_MANAGER, comExampleDatabasemanagerComExampleDatabaseManagerIface))

struct _comExampleDatabasemanagerComExampleDatabaseManager;
typedef struct _comExampleDatabasemanagerComExampleDatabaseManager comExampleDatabasemanagerComExampleDatabaseManager;
typedef struct _comExampleDatabasemanagerComExampleDatabaseManagerIface comExampleDatabasemanagerComExampleDatabaseManagerIface;

struct _comExampleDatabasemanagerComExampleDatabaseManagerIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_create) (
    comExampleDatabasemanagerComExampleDatabaseManager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_delete) (
    comExampleDatabasemanagerComExampleDatabaseManager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_read) (
    comExampleDatabasemanagerComExampleDatabaseManager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_update) (
    comExampleDatabasemanagerComExampleDatabaseManager *object,
    GDBusMethodInvocation *invocation);

};

GType com.example.databasemanager_com_example_database_manager_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *com.example.databasemanager_com_example_database_manager_interface_info (void);
guint com.example.databasemanager_com_example_database_manager_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void com.example.databasemanager_com_example_database_manager_complete_create (
    comExampleDatabasemanagerComExampleDatabaseManager *object,
    GDBusMethodInvocation *invocation);

void com.example.databasemanager_com_example_database_manager_complete_read (
    comExampleDatabasemanagerComExampleDatabaseManager *object,
    GDBusMethodInvocation *invocation);

void com.example.databasemanager_com_example_database_manager_complete_update (
    comExampleDatabasemanagerComExampleDatabaseManager *object,
    GDBusMethodInvocation *invocation);

void com.example.databasemanager_com_example_database_manager_complete_delete (
    comExampleDatabasemanagerComExampleDatabaseManager *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void com.example.databasemanager_com_example_database_manager_call_create (
    comExampleDatabasemanagerComExampleDatabaseManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean com.example.databasemanager_com_example_database_manager_call_create_finish (
    comExampleDatabasemanagerComExampleDatabaseManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean com.example.databasemanager_com_example_database_manager_call_create_sync (
    comExampleDatabasemanagerComExampleDatabaseManager *proxy,
    GCancellable *cancellable,
    GError **error);

void com.example.databasemanager_com_example_database_manager_call_read (
    comExampleDatabasemanagerComExampleDatabaseManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean com.example.databasemanager_com_example_database_manager_call_read_finish (
    comExampleDatabasemanagerComExampleDatabaseManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean com.example.databasemanager_com_example_database_manager_call_read_sync (
    comExampleDatabasemanagerComExampleDatabaseManager *proxy,
    GCancellable *cancellable,
    GError **error);

void com.example.databasemanager_com_example_database_manager_call_update (
    comExampleDatabasemanagerComExampleDatabaseManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean com.example.databasemanager_com_example_database_manager_call_update_finish (
    comExampleDatabasemanagerComExampleDatabaseManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean com.example.databasemanager_com_example_database_manager_call_update_sync (
    comExampleDatabasemanagerComExampleDatabaseManager *proxy,
    GCancellable *cancellable,
    GError **error);

void com.example.databasemanager_com_example_database_manager_call_delete (
    comExampleDatabasemanagerComExampleDatabaseManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean com.example.databasemanager_com_example_database_manager_call_delete_finish (
    comExampleDatabasemanagerComExampleDatabaseManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean com.example.databasemanager_com_example_database_manager_call_delete_sync (
    comExampleDatabasemanagerComExampleDatabaseManager *proxy,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define COM.EXAMPLE.DATABASEMANAGER_TYPE_COM_EXAMPLE_DATABASE_MANAGER_PROXY (com.example.databasemanager_com_example_database_manager_proxy_get_type ())
#define COM.EXAMPLE.DATABASEMANAGER_COM_EXAMPLE_DATABASE_MANAGER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), COM.EXAMPLE.DATABASEMANAGER_TYPE_COM_EXAMPLE_DATABASE_MANAGER_PROXY, comExampleDatabasemanagerComExampleDatabaseManagerProxy))
#define COM.EXAMPLE.DATABASEMANAGER_COM_EXAMPLE_DATABASE_MANAGER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), COM.EXAMPLE.DATABASEMANAGER_TYPE_COM_EXAMPLE_DATABASE_MANAGER_PROXY, comExampleDatabasemanagerComExampleDatabaseManagerProxyClass))
#define COM.EXAMPLE.DATABASEMANAGER_COM_EXAMPLE_DATABASE_MANAGER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), COM.EXAMPLE.DATABASEMANAGER_TYPE_COM_EXAMPLE_DATABASE_MANAGER_PROXY, comExampleDatabasemanagerComExampleDatabaseManagerProxyClass))
#define COM.EXAMPLE.DATABASEMANAGER_IS_COM_EXAMPLE_DATABASE_MANAGER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), COM.EXAMPLE.DATABASEMANAGER_TYPE_COM_EXAMPLE_DATABASE_MANAGER_PROXY))
#define COM.EXAMPLE.DATABASEMANAGER_IS_COM_EXAMPLE_DATABASE_MANAGER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), COM.EXAMPLE.DATABASEMANAGER_TYPE_COM_EXAMPLE_DATABASE_MANAGER_PROXY))

typedef struct _comExampleDatabasemanagerComExampleDatabaseManagerProxy comExampleDatabasemanagerComExampleDatabaseManagerProxy;
typedef struct _comExampleDatabasemanagerComExampleDatabaseManagerProxyClass comExampleDatabasemanagerComExampleDatabaseManagerProxyClass;
typedef struct _comExampleDatabasemanagerComExampleDatabaseManagerProxyPrivate comExampleDatabasemanagerComExampleDatabaseManagerProxyPrivate;

struct _comExampleDatabasemanagerComExampleDatabaseManagerProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  comExampleDatabasemanagerComExampleDatabaseManagerProxyPrivate *priv;
};

struct _comExampleDatabasemanagerComExampleDatabaseManagerProxyClass
{
  GDBusProxyClass parent_class;
};

GType com.example.databasemanager_com_example_database_manager_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (comExampleDatabasemanagerComExampleDatabaseManagerProxy, g_object_unref)
#endif

void com.example.databasemanager_com_example_database_manager_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
comExampleDatabasemanagerComExampleDatabaseManager *com.example.databasemanager_com_example_database_manager_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
comExampleDatabasemanagerComExampleDatabaseManager *com.example.databasemanager_com_example_database_manager_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void com.example.databasemanager_com_example_database_manager_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
comExampleDatabasemanagerComExampleDatabaseManager *com.example.databasemanager_com_example_database_manager_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
comExampleDatabasemanagerComExampleDatabaseManager *com.example.databasemanager_com_example_database_manager_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define COM.EXAMPLE.DATABASEMANAGER_TYPE_COM_EXAMPLE_DATABASE_MANAGER_SKELETON (com.example.databasemanager_com_example_database_manager_skeleton_get_type ())
#define COM.EXAMPLE.DATABASEMANAGER_COM_EXAMPLE_DATABASE_MANAGER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), COM.EXAMPLE.DATABASEMANAGER_TYPE_COM_EXAMPLE_DATABASE_MANAGER_SKELETON, comExampleDatabasemanagerComExampleDatabaseManagerSkeleton))
#define COM.EXAMPLE.DATABASEMANAGER_COM_EXAMPLE_DATABASE_MANAGER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), COM.EXAMPLE.DATABASEMANAGER_TYPE_COM_EXAMPLE_DATABASE_MANAGER_SKELETON, comExampleDatabasemanagerComExampleDatabaseManagerSkeletonClass))
#define COM.EXAMPLE.DATABASEMANAGER_COM_EXAMPLE_DATABASE_MANAGER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), COM.EXAMPLE.DATABASEMANAGER_TYPE_COM_EXAMPLE_DATABASE_MANAGER_SKELETON, comExampleDatabasemanagerComExampleDatabaseManagerSkeletonClass))
#define COM.EXAMPLE.DATABASEMANAGER_IS_COM_EXAMPLE_DATABASE_MANAGER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), COM.EXAMPLE.DATABASEMANAGER_TYPE_COM_EXAMPLE_DATABASE_MANAGER_SKELETON))
#define COM.EXAMPLE.DATABASEMANAGER_IS_COM_EXAMPLE_DATABASE_MANAGER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), COM.EXAMPLE.DATABASEMANAGER_TYPE_COM_EXAMPLE_DATABASE_MANAGER_SKELETON))

typedef struct _comExampleDatabasemanagerComExampleDatabaseManagerSkeleton comExampleDatabasemanagerComExampleDatabaseManagerSkeleton;
typedef struct _comExampleDatabasemanagerComExampleDatabaseManagerSkeletonClass comExampleDatabasemanagerComExampleDatabaseManagerSkeletonClass;
typedef struct _comExampleDatabasemanagerComExampleDatabaseManagerSkeletonPrivate comExampleDatabasemanagerComExampleDatabaseManagerSkeletonPrivate;

struct _comExampleDatabasemanagerComExampleDatabaseManagerSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  comExampleDatabasemanagerComExampleDatabaseManagerSkeletonPrivate *priv;
};

struct _comExampleDatabasemanagerComExampleDatabaseManagerSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType com.example.databasemanager_com_example_database_manager_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (comExampleDatabasemanagerComExampleDatabaseManagerSkeleton, g_object_unref)
#endif

comExampleDatabasemanagerComExampleDatabaseManager *com.example.databasemanager_com_example_database_manager_skeleton_new (void);


G_END_DECLS

#endif /* __GENERATED_CODE_H__ */
