
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx__sampleproxy_h__PROXY_MARSHAL_H
#define __dbusxx__sampleproxy_h__PROXY_MARSHAL_H

#include <dbus-c++-1/dbus-c++/dbus.h>
#include <cassert>

namespace com {
namespace example {

class DatabaseManager_proxy
: public ::DBus::InterfaceProxy
{
public:

    DatabaseManager_proxy()
    : ::DBus::InterfaceProxy("com.example.DatabaseManager")
    {
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    void Create()
    {
        ::DBus::CallMessage call;
        call.member("Create");
        ::DBus::Message ret = invoke_method (call);
    }

    void Read()
    {
        ::DBus::CallMessage call;
        call.member("Read");
        ::DBus::Message ret = invoke_method (call);
    }

    void Update()
    {
        ::DBus::CallMessage call;
        call.member("Update");
        ::DBus::Message ret = invoke_method (call);
    }

    void Delete()
    {
        ::DBus::CallMessage call;
        call.member("Delete");
        ::DBus::Message ret = invoke_method (call);
    }


public:

    /* signal handlers for this interface
     */

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
};

} } 
#endif //__dbusxx__sampleproxy_h__PROXY_MARSHAL_H
