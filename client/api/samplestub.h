
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx__samplestub_h__ADAPTOR_MARSHAL_H
#define __dbusxx__samplestub_h__ADAPTOR_MARSHAL_H

#include <dbus-c++/dbus.h>
#include <cassert>

namespace com {
namespace example {

class DatabaseManager_adaptor
: public ::DBus::InterfaceAdaptor
{
public:

    DatabaseManager_adaptor()
    : ::DBus::InterfaceAdaptor("com.example.DatabaseManager")
    {
        register_method(DatabaseManager_adaptor, Create, _Create_stub);
        register_method(DatabaseManager_adaptor, Read, _Read_stub);
        register_method(DatabaseManager_adaptor, Update, _Update_stub);
        register_method(DatabaseManager_adaptor, Delete, _Delete_stub);
    }

    ::DBus::IntrospectedInterface *introspect() const 
    {
        static ::DBus::IntrospectedArgument Create_args[] = 
        {
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument Read_args[] = 
        {
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument Update_args[] = 
        {
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument Delete_args[] = 
        {
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedMethod DatabaseManager_adaptor_methods[] = 
        {
            { "Create", Create_args },
            { "Read", Read_args },
            { "Update", Update_args },
            { "Delete", Delete_args },
            { 0, 0 }
        };
        static ::DBus::IntrospectedMethod DatabaseManager_adaptor_signals[] = 
        {
            { 0, 0 }
        };
        static ::DBus::IntrospectedProperty DatabaseManager_adaptor_properties[] = 
        {
            { 0, 0, 0, 0 }
        };
        static ::DBus::IntrospectedInterface DatabaseManager_adaptor_interface = 
        {
            "com.example.DatabaseManager",
            DatabaseManager_adaptor_methods,
            DatabaseManager_adaptor_signals,
            DatabaseManager_adaptor_properties
        };
        return &DatabaseManager_adaptor_interface;
    }

public:

    /* properties exposed by this interface, use
     * property() and property(value) to get and set a particular property
     */

public:

    /* methods exported by this interface,
     * you will have to implement them in your ObjectAdaptor
     */
    virtual void Create() = 0;
    virtual void Read() = 0;
    virtual void Update() = 0;
    virtual void Delete() = 0;

public:

    /* signal emitters for this interface
     */

private:

    /* unmarshalers (to unpack the DBus message before calling the actual interface method)
     */
    ::DBus::Message _Create_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        Create();
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _Read_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        Read();
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _Update_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        Update();
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _Delete_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        Delete();
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
};

} } 
#endif //__dbusxx__samplestub_h__ADAPTOR_MARSHAL_H
